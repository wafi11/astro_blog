---
import prisma from '../lib/db';
import jwt, { type JwtPayload } from 'jsonwebtoken';

 
export async function getUserFromToken(token : string) {
  try {
    const jwtKey = import.meta.env.AUTH_SECRET;
    if (!token) {
      throw new Error('Token Not Found');
    }
    if (!jwtKey) {
      throw new Error('JWT key not found in environment variables');
    }

    // Verify the token
    const decoded = jwt.verify(token, jwtKey);
    if (typeof decoded === 'string') {
      throw new Error('Invalid token payload');
    }

    // Get the userId from the decoded token
    const userId = (decoded as JwtPayload).userId as string;
    if (!userId) {
      throw new Error('User ID not found in token');
    }

    // Fetch the user from the database
    const user = await prisma.user.findUnique({
      where: {
        id: userId,
      },
      include: {
        likes: true,
        comments : true,
      },
    });

    if (!user) {
      throw new Error('User not found');
    }

    return user;
  } catch (error) {
    console.error('Error getting user from token:', error);
    throw error; 
  }
}



---



