generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  comments       Comments[]
  reply          ReplyComments[]
  accounts       Account[]
  sessions       Session[]
  likes          Likes[]
  collections Collection[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  sessionToken String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Blog {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  image       String?
  url         String
  author      String
  description String
  category    String[]
  Comments    Comments[]
  collections Collection[]
  likes       Likes[]
  createdAt   DateTime   @default(now())
}

model Likes {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  likes      Boolean        @default(false)
  userId     String?        @db.ObjectId
  blogId     String?        @db.ObjectId
  commentId  String?        @db.ObjectId
  respliesId String?        @db.ObjectId
  replies    ReplyComments? @relation(fields: [respliesId], references: [id], onDelete: Cascade)
  comment    Comments?      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog       Blog?          @relation(fields: [blogId], references: [id], onDelete: Cascade)
  @@unique([blogId,respliesId,commentId])
}


model Collection {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  collect   Boolean @default(false)
  blogId     String?        @db.ObjectId
  blog       Blog?          @relation(fields: [blogId], references: [id], onDelete: Cascade)
  userId     String?        @db.ObjectId
  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([blogId])
}

model Comments {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String          @db.ObjectId
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogId    String          @db.ObjectId
  blog      Blog            @relation(fields: [blogId], references: [id], onDelete: Cascade)
  replies   ReplyComments[]
  likes     Likes[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model ReplyComments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  commentId String   @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comments @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Likes     Likes[]
}
