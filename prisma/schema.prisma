generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt  
  comments       Comments[]
  accounts       Account[]   
  sessions       Session[] 
  likes          Likes[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  sessionToken String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  identifier      String
  token           String      @unique
  expires         DateTime    @map("expiresAt")
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Likes {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  likes      Int
  userId     String      @db.ObjectId
  commentId  String      @db.ObjectId
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment    Comments    @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Comments {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String      @db.ObjectId           
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogName  String      @db.ObjectId
  likes     Likes[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt  
}
